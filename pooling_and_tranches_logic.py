# -*- coding: utf-8 -*-
"""final_pool_tranches.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c7wNlStid3kytUI40HkZTpMFVGyETJ9h
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("lorenzozoppelletto/financial-risk-for-loan-approval")

print("Path to dataset files:", path)
import os
print("Files in dataset:", os.listdir(path))
import pandas as pd
df = pd.read_csv(os.path.join(path, "Loan.csv"))
df.head()

print(df.columns)

df['Liquidity_Ratio'] = (df['SavingsAccountBalance'] + df['CheckingAccountBalance'])/df['LoanAmount']

df['Relative_Ratio'] = (df['MonthlyIncome']/ (df['LoanAmount']/ df['LoanDuration']))
df["IncomePerDependent"] = df["AnnualIncome"] / (df["NumberOfDependents"] + 1)  # Avoid division by zero
print(df)

print(df['CreditScore'].min())
print(df['CreditScore'].max())
print(df['LengthOfCreditHistory'].min())
print(df['LengthOfCreditHistory'].max())

import pandas as pd

# Load dataset


def classify_tranche(loan):
    """
    Assigns a tranche to a loan based on multiple criteria:
    RiskScore, CreditScore, DebtToIncomeRatio, Liquidity_Ratio, etc.
    """
    if loan["RiskScore"] > 85:
        return "Senior Tranche"
    elif loan["RiskScore"] > 70:
        return "Mezzanine Tranche"
    elif loan["RiskScore"] > 50:
        return "Subordinated Tranche"
    else:
        return "Equity Tranche"

def pool_loans(df, criterion, suboption):
    """
    Pools loans based on different criteria before tranche classification.
    """
    if criterion == "Duration":
        if suboption == "Short-Term":
            return df[df["LoanDuration"] <= 12]
        elif suboption == "Medium-Term":
            return df[(df["LoanDuration"] > 12) & (df["LoanDuration"] <= 60)]
        elif suboption == "Long-Term":
            return df[df["LoanDuration"] > 60]


    elif criterion == "Creditworthiness":
        if suboption == "Excellent":
          return df[
            ((df["CreditScore"] >= 800) |
            (df["LengthOfCreditHistory"] > 10) |
            ((df["NumberOfOpenCreditLines"] >= 3) & (df["NumberOfOpenCreditLines"] <= 7)) &
            (df["NumberOfCreditInquiries"] <= 2)) & (((df["PreviousLoanDefaults"] == 0) & (df["BankruptcyHistory"] == 0)))
        ]
        elif suboption == "Good":
          return df[
            (((df["CreditScore"] >= 700) & (df["CreditScore"] < 800)) |
            (df["LengthOfCreditHistory"] >= 7) |
            ((df["NumberOfOpenCreditLines"] >= 3) & (df["NumberOfOpenCreditLines"] <= 12)) &
            (df["NumberOfCreditInquiries"] <= 4) )& (((df["PreviousLoanDefaults"] == 0) & (df["BankruptcyHistory"] == 0)))
        ]
        elif suboption == "Fair":
          return df[
            (((df["CreditScore"] >= 600) & (df["CreditScore"] < 700)) |
            ((df["LengthOfCreditHistory"] >= 3) & (df["LengthOfCreditHistory"] <= 6)) |
            (df["NumberOfOpenCreditLines"] > 12) |
            (df["NumberOfCreditInquiries"] > 4)) & ((df["PreviousLoanDefaults"] == 0) & (df["BankruptcyHistory"] == 0))
        ]
        elif suboption == "Poor":
          return df[
            (df["CreditScore"] < 600) |
            (df["LengthOfCreditHistory"] < 3) |
            (df["NumberOfCreditInquiries"] > 5) |
            (df["PreviousLoanDefaults"] == 1) | (df["BankruptcyHistory"] == 1)
        ]

    elif criterion == "ML-Based Risk":

        if suboption == "Low-Risk":
            return df[df["RiskScore"] > 80]
        elif suboption == "Medium-Risk":
            return df[(df["RiskScore"] > 50) & (df["RiskScore"] <= 80)]
        elif suboption == "High-Risk":
            return df[df["RiskScore"] <= 50]

    elif criterion == "Liquidity":
        if suboption == "High Liquidity":
            return df[(df["Liquidity_Ratio"] > 1) | (df['Relative_Ratio'] >= 3)]  # Corrected this line
        elif suboption == "Medium Liquidity":
            # Corrected this line - using boolean indexing correctly
            return df[((df["Liquidity_Ratio"] > 0.5) | (df['Relative_Ratio'] >= 2)) & (df['Relative_Ratio'] < 3)]
        elif suboption == "Low Liquidity":
            return df[(df["Liquidity_Ratio"] <= 0.5) | (df['Relative_Ratio'] <= 1)]  # Corrected this line
    elif criterion == "Debt Analysis":
        if suboption == "Low Debt":
            return df[df["DebtToIncomeRatio"] <= 30]
        elif suboption == "Moderate Debt":
            return df[(df["DebtToIncomeRatio"] > 30) & (df["DebtToIncomeRatio"] <= 50)]
        elif suboption == "High Debt":
            return df[df["DebtToIncomeRatio"] > 50 | (df["PreviousLoanDefaults"] == 1)]

    elif criterion == "Financial Liabilities":
        if suboption == "Not Trustable":
            return df[df["TotalDebtToIncomeRatio"] <= 30 | (df["PreviousLoanDefaults"] == 1) | (df["BankruptcyHistory"] == 1)]
        elif suboption == "Moderate Trustable":
            return df[(df["TotalDebtToIncomeRatio"] > 30) & (df["TotalDebtToIncomeRatio"] <= 50) & (df["PreviousLoanDefaults"] == 0) & (df["BankruptcyHistory"] == 0)]
        elif suboption == "Highly Trustable":
            return df[df["TotalDebtToIncomeRatio"] > 50 | (df["PreviousLoanDefaults"] == 0) & (df["BankruptcyHistory"] == 0)]

    elif criterion == "Age":
        if suboption == "Young Borrowers":
            return df[df["Age"] < 30]
        elif suboption == "Mid-Career Borrowers":
            return df[(df["Age"] >= 30) & (df["Age"] <= 50)]
        elif suboption == "Senior Borrowers":
            return df[df["Age"] > 50]

    elif criterion == "Financial Status":


        if suboption == "High Income":
            return df[(df["IncomePerDependent"] > 50000) & (df["EmploymentStatus"] == "Employed")]
        elif suboption == "Medium Income":
            return df[(df["IncomePerDependent"] > 25000) & (df["IncomePerDependent"] <= 50000) &
                  (df["EmploymentStatus"].isin(["Employed", "Self Employed"]))]
        elif suboption == "Low Income":
            return df[(df["IncomePerDependent"] <= 25000) | (df["EmploymentStatus"] == "Unemployed")]


    else:
        print("Invalid criterion selected.")
        return None

def allocate_tranches(df, criterion, suboption):
    """
    Pools loans based on the chosen criterion, then classifies them into tranches.
    """
    pooled_loans = pool_loans(df, criterion, suboption)

    if pooled_loans is None or pooled_loans.empty:
        print("No loans available for the selected criterion.")
        return None

    # Assign tranches based on classification function
    pooled_loans = pooled_loans.copy()
    pooled_loans["Tranche"] = pooled_loans.apply(classify_tranche, axis=1)



    # Split loans into tranches
    tranches = {
        "Senior Tranche": pooled_loans[pooled_loans["Tranche"] == "Senior Tranche"],
        "Mezzanine Tranche": pooled_loans[pooled_loans["Tranche"] == "Mezzanine Tranche"],
        "Subordinated Tranche": pooled_loans[pooled_loans["Tranche"] == "Subordinated Tranche"],
        "Equity Tranche": pooled_loans[pooled_loans["Tranche"] == "Equity Tranche"]
    }

    return tranches

# Example Usage
selected_criterion = "Financial Status"  # Change to other criteria as needed
selected_suboption = "Low Income"  # Change based on selection

tranches = allocate_tranches(df, selected_criterion, selected_suboption)

# Display results
if tranches is not None:  # Add this condition
    # Display results
    for tranche, loans in tranches.items():
        print(f"{tranche}: {len(loans)} loans")
else:
    print("No tranches were created for the selected criteria.") # Provide a message if no tranches are created


